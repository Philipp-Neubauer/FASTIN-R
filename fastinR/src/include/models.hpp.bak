#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.14

#include <stan/model/model_header.hpp>

namespace model_Pop_prop_analysis_SI_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

class model_Pop_prop_analysis_SI : public prob_grad {
private:
    int n_prey_samps_SI;
    int n_preys;
    int n_preds;
    int isos;
    vector<int> prey_ix_SI;
    vector<vector_d> preys_SI;
    vector<vector_d> preym_SI;
    vector<vector_d> mean_cs;
    vector<vector_d> sigma_cs;
    vector<vector_d> preds_SI;
public:
    model_Pop_prop_analysis_SI(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    model_Pop_prop_analysis_SI(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_Pop_prop_analysis_SI_namespace::model_Pop_prop_analysis_SI";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "n_prey_samps_SI", "int", context__.to_vec());
        n_prey_samps_SI = int(0);
        vals_i__ = context__.vals_i("n_prey_samps_SI");
        pos__ = 0;
        n_prey_samps_SI = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_preys", "int", context__.to_vec());
        n_preys = int(0);
        vals_i__ = context__.vals_i("n_preys");
        pos__ = 0;
        n_preys = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_preds", "int", context__.to_vec());
        n_preds = int(0);
        vals_i__ = context__.vals_i("n_preds");
        pos__ = 0;
        n_preds = vals_i__[pos__++];
        context__.validate_dims("data initialization", "isos", "int", context__.to_vec());
        isos = int(0);
        vals_i__ = context__.vals_i("isos");
        pos__ = 0;
        isos = vals_i__[pos__++];
        context__.validate_dims("data initialization", "prey_ix_SI", "int", context__.to_vec(n_prey_samps_SI));
        validate_non_negative_index("prey_ix_SI", "n_prey_samps_SI", n_prey_samps_SI);
        prey_ix_SI = std::vector<int>(n_prey_samps_SI,int(0));
        vals_i__ = context__.vals_i("prey_ix_SI");
        pos__ = 0;
        size_t prey_ix_SI_limit_0__ = n_prey_samps_SI;
        for (size_t i_0__ = 0; i_0__ < prey_ix_SI_limit_0__; ++i_0__) {
            prey_ix_SI[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("preys_SI", "n_prey_samps_SI", n_prey_samps_SI);
        validate_non_negative_index("preys_SI", "isos", isos);
        preys_SI = std::vector<vector_d>(n_prey_samps_SI,vector_d(static_cast<Eigen::VectorXd::Index>(isos)));
        context__.validate_dims("data initialization", "preys_SI", "vector_d", context__.to_vec(n_prey_samps_SI,isos));
        vals_r__ = context__.vals_r("preys_SI");
        pos__ = 0;
        size_t preys_SI_i_vec_lim__ = isos;
        for (size_t i_vec__ = 0; i_vec__ < preys_SI_i_vec_lim__; ++i_vec__) {
            size_t preys_SI_limit_0__ = n_prey_samps_SI;
            for (size_t i_0__ = 0; i_0__ < preys_SI_limit_0__; ++i_0__) {
                preys_SI[i_0__][i_vec__] = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("preym_SI", "n_preys", n_preys);
        validate_non_negative_index("preym_SI", "isos", isos);
        preym_SI = std::vector<vector_d>(n_preys,vector_d(static_cast<Eigen::VectorXd::Index>(isos)));
        context__.validate_dims("data initialization", "preym_SI", "vector_d", context__.to_vec(n_preys,isos));
        vals_r__ = context__.vals_r("preym_SI");
        pos__ = 0;
        size_t preym_SI_i_vec_lim__ = isos;
        for (size_t i_vec__ = 0; i_vec__ < preym_SI_i_vec_lim__; ++i_vec__) {
            size_t preym_SI_limit_0__ = n_preys;
            for (size_t i_0__ = 0; i_0__ < preym_SI_limit_0__; ++i_0__) {
                preym_SI[i_0__][i_vec__] = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("mean_cs", "n_preys", n_preys);
        validate_non_negative_index("mean_cs", "isos", isos);
        mean_cs = std::vector<vector_d>(n_preys,vector_d(static_cast<Eigen::VectorXd::Index>(isos)));
        context__.validate_dims("data initialization", "mean_cs", "vector_d", context__.to_vec(n_preys,isos));
        vals_r__ = context__.vals_r("mean_cs");
        pos__ = 0;
        size_t mean_cs_i_vec_lim__ = isos;
        for (size_t i_vec__ = 0; i_vec__ < mean_cs_i_vec_lim__; ++i_vec__) {
            size_t mean_cs_limit_0__ = n_preys;
            for (size_t i_0__ = 0; i_0__ < mean_cs_limit_0__; ++i_0__) {
                mean_cs[i_0__][i_vec__] = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("sigma_cs", "n_preys", n_preys);
        validate_non_negative_index("sigma_cs", "isos", isos);
        sigma_cs = std::vector<vector_d>(n_preys,vector_d(static_cast<Eigen::VectorXd::Index>(isos)));
        context__.validate_dims("data initialization", "sigma_cs", "vector_d", context__.to_vec(n_preys,isos));
        vals_r__ = context__.vals_r("sigma_cs");
        pos__ = 0;
        size_t sigma_cs_i_vec_lim__ = isos;
        for (size_t i_vec__ = 0; i_vec__ < sigma_cs_i_vec_lim__; ++i_vec__) {
            size_t sigma_cs_limit_0__ = n_preys;
            for (size_t i_0__ = 0; i_0__ < sigma_cs_limit_0__; ++i_0__) {
                sigma_cs[i_0__][i_vec__] = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("preds_SI", "n_preds", n_preds);
        validate_non_negative_index("preds_SI", "isos", isos);
        preds_SI = std::vector<vector_d>(n_preds,vector_d(static_cast<Eigen::VectorXd::Index>(isos)));
        context__.validate_dims("data initialization", "preds_SI", "vector_d", context__.to_vec(n_preds,isos));
        vals_r__ = context__.vals_r("preds_SI");
        pos__ = 0;
        size_t preds_SI_i_vec_lim__ = isos;
        for (size_t i_vec__ = 0; i_vec__ < preds_SI_i_vec_lim__; ++i_vec__) {
            size_t preds_SI_limit_0__ = n_preds;
            for (size_t i_0__ = 0; i_0__ < preds_SI_limit_0__; ++i_0__) {
                preds_SI[i_0__][i_vec__] = vals_r__[pos__++];
            }
        }

        // validate, data variables
        check_greater_or_equal(function__,"n_prey_samps_SI",n_prey_samps_SI,1);
        check_greater_or_equal(function__,"n_preys",n_preys,1);
        check_greater_or_equal(function__,"n_preds",n_preds,1);
        check_greater_or_equal(function__,"isos",isos,1);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += isos * n_preys;
        num_params_r__ += isos * n_preys;
        num_params_r__ += isos * n_preys;
        num_params_r__ += ((isos * (isos - 1)) / 2) * n_preys;
        num_params_r__ += ((isos * (isos - 1)) / 2);
        num_params_r__ += ((isos * (isos - 1)) / 2);
        num_params_r__ += isos * n_preys;
        num_params_r__ += isos;
        num_params_r__ += isos;
        num_params_r__ += n_preys;
    }

    ~model_Pop_prop_analysis_SI() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("prey_means_SI")))
            throw std::runtime_error("variable prey_means_SI missing");
        vals_r__ = context__.vals_r("prey_means_SI");
        pos__ = 0U;
        context__.validate_dims("initialization", "prey_means_SI", "vector_d", context__.to_vec(n_preys,isos));
        // generate_declaration prey_means_SI
        std::vector<vector_d> prey_means_SI(n_preys,vector_d(static_cast<Eigen::VectorXd::Index>(isos)));
        for (int j1__ = 0U; j1__ < isos; ++j1__)
            for (int i0__ = 0U; i0__ < n_preys; ++i0__)
                prey_means_SI[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < n_preys; ++i0__)
            try {
            writer__.vector_unconstrain(prey_means_SI[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable prey_means_SI: ") + e.what());
        }

        if (!(context__.contains_r("cs")))
            throw std::runtime_error("variable cs missing");
        vals_r__ = context__.vals_r("cs");
        pos__ = 0U;
        context__.validate_dims("initialization", "cs", "vector_d", context__.to_vec(n_preys,isos));
        // generate_declaration cs
        std::vector<vector_d> cs(n_preys,vector_d(static_cast<Eigen::VectorXd::Index>(isos)));
        for (int j1__ = 0U; j1__ < isos; ++j1__)
            for (int i0__ = 0U; i0__ < n_preys; ++i0__)
                cs[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < n_preys; ++i0__)
            try {
            writer__.vector_unconstrain(cs[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable cs: ") + e.what());
        }

        if (!(context__.contains_r("cons_prey_SI")))
            throw std::runtime_error("variable cons_prey_SI missing");
        vals_r__ = context__.vals_r("cons_prey_SI");
        pos__ = 0U;
        context__.validate_dims("initialization", "cons_prey_SI", "vector_d", context__.to_vec(n_preys,isos));
        // generate_declaration cons_prey_SI
        std::vector<vector_d> cons_prey_SI(n_preys,vector_d(static_cast<Eigen::VectorXd::Index>(isos)));
        for (int j1__ = 0U; j1__ < isos; ++j1__)
            for (int i0__ = 0U; i0__ < n_preys; ++i0__)
                cons_prey_SI[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < n_preys; ++i0__)
            try {
            writer__.vector_unconstrain(cons_prey_SI[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable cons_prey_SI: ") + e.what());
        }

        if (!(context__.contains_r("corr_prey")))
            throw std::runtime_error("variable corr_prey missing");
        vals_r__ = context__.vals_r("corr_prey");
        pos__ = 0U;
        context__.validate_dims("initialization", "corr_prey", "matrix_d", context__.to_vec(n_preys,isos,isos));
        // generate_declaration corr_prey
        std::vector<matrix_d> corr_prey(n_preys,matrix_d(static_cast<Eigen::VectorXd::Index>(isos),static_cast<Eigen::VectorXd::Index>(isos)));
        for (int j2__ = 0U; j2__ < isos; ++j2__)
            for (int j1__ = 0U; j1__ < isos; ++j1__)
                for (int i0__ = 0U; i0__ < n_preys; ++i0__)
                    corr_prey[i0__](j1__,j2__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < n_preys; ++i0__)
            try {
            writer__.cholesky_corr_unconstrain(corr_prey[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable corr_prey: ") + e.what());
        }

        if (!(context__.contains_r("corr_pred")))
            throw std::runtime_error("variable corr_pred missing");
        vals_r__ = context__.vals_r("corr_pred");
        pos__ = 0U;
        context__.validate_dims("initialization", "corr_pred", "matrix_d", context__.to_vec(isos,isos));
        // generate_declaration corr_pred
        matrix_d corr_pred(static_cast<Eigen::VectorXd::Index>(isos),static_cast<Eigen::VectorXd::Index>(isos));
        for (int j2__ = 0U; j2__ < isos; ++j2__)
            for (int j1__ = 0U; j1__ < isos; ++j1__)
                corr_pred(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cholesky_corr_unconstrain(corr_pred);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable corr_pred: ") + e.what());
        }

        if (!(context__.contains_r("corr_mean")))
            throw std::runtime_error("variable corr_mean missing");
        vals_r__ = context__.vals_r("corr_mean");
        pos__ = 0U;
        context__.validate_dims("initialization", "corr_mean", "matrix_d", context__.to_vec(isos,isos));
        // generate_declaration corr_mean
        matrix_d corr_mean(static_cast<Eigen::VectorXd::Index>(isos),static_cast<Eigen::VectorXd::Index>(isos));
        for (int j2__ = 0U; j2__ < isos; ++j2__)
            for (int j1__ = 0U; j1__ < isos; ++j1__)
                corr_mean(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cholesky_corr_unconstrain(corr_mean);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable corr_mean: ") + e.what());
        }

        if (!(context__.contains_r("tau_prey")))
            throw std::runtime_error("variable tau_prey missing");
        vals_r__ = context__.vals_r("tau_prey");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau_prey", "vector_d", context__.to_vec(n_preys,isos));
        // generate_declaration tau_prey
        std::vector<vector_d> tau_prey(n_preys,vector_d(static_cast<Eigen::VectorXd::Index>(isos)));
        for (int j1__ = 0U; j1__ < isos; ++j1__)
            for (int i0__ = 0U; i0__ < n_preys; ++i0__)
                tau_prey[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < n_preys; ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,tau_prey[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau_prey: ") + e.what());
        }

        if (!(context__.contains_r("tau_mean")))
            throw std::runtime_error("variable tau_mean missing");
        vals_r__ = context__.vals_r("tau_mean");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau_mean", "vector_d", context__.to_vec(isos));
        // generate_declaration tau_mean
        vector_d tau_mean(static_cast<Eigen::VectorXd::Index>(isos));
        for (int j1__ = 0U; j1__ < isos; ++j1__)
            tau_mean(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,tau_mean);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau_mean: ") + e.what());
        }

        if (!(context__.contains_r("tau_pred")))
            throw std::runtime_error("variable tau_pred missing");
        vals_r__ = context__.vals_r("tau_pred");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau_pred", "vector_d", context__.to_vec(isos));
        // generate_declaration tau_pred
        vector_d tau_pred(static_cast<Eigen::VectorXd::Index>(isos));
        for (int j1__ = 0U; j1__ < isos; ++j1__)
            tau_pred(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,tau_pred);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau_pred: ") + e.what());
        }

        if (!(context__.contains_r("props")))
            throw std::runtime_error("variable props missing");
        vals_r__ = context__.vals_r("props");
        pos__ = 0U;
        context__.validate_dims("initialization", "props", "double", context__.to_vec(n_preys));
        // generate_declaration props
        std::vector<double> props(n_preys,double(0));
        for (int i0__ = 0U; i0__ < n_preys; ++i0__)
            props[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < n_preys; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,props[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable props: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > prey_means_SI;
        size_t dim_prey_means_SI_0__ = n_preys;
        prey_means_SI.reserve(dim_prey_means_SI_0__);
        for (size_t k_0__ = 0; k_0__ < dim_prey_means_SI_0__; ++k_0__) {
            if (jacobian__)
                prey_means_SI.push_back(in__.vector_constrain(isos,lp__));
            else
                prey_means_SI.push_back(in__.vector_constrain(isos));
        }

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > cs;
        size_t dim_cs_0__ = n_preys;
        cs.reserve(dim_cs_0__);
        for (size_t k_0__ = 0; k_0__ < dim_cs_0__; ++k_0__) {
            if (jacobian__)
                cs.push_back(in__.vector_constrain(isos,lp__));
            else
                cs.push_back(in__.vector_constrain(isos));
        }

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > cons_prey_SI;
        size_t dim_cons_prey_SI_0__ = n_preys;
        cons_prey_SI.reserve(dim_cons_prey_SI_0__);
        for (size_t k_0__ = 0; k_0__ < dim_cons_prey_SI_0__; ++k_0__) {
            if (jacobian__)
                cons_prey_SI.push_back(in__.vector_constrain(isos,lp__));
            else
                cons_prey_SI.push_back(in__.vector_constrain(isos));
        }

        vector<Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> > corr_prey;
        size_t dim_corr_prey_0__ = n_preys;
        corr_prey.reserve(dim_corr_prey_0__);
        for (size_t k_0__ = 0; k_0__ < dim_corr_prey_0__; ++k_0__) {
            if (jacobian__)
                corr_prey.push_back(in__.cholesky_corr_constrain(isos,lp__));
            else
                corr_prey.push_back(in__.cholesky_corr_constrain(isos));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  corr_pred;
        (void) corr_pred;  // dummy to suppress unused var warning
        if (jacobian__)
            corr_pred = in__.cholesky_corr_constrain(isos,lp__);
        else
            corr_pred = in__.cholesky_corr_constrain(isos);

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  corr_mean;
        (void) corr_mean;  // dummy to suppress unused var warning
        if (jacobian__)
            corr_mean = in__.cholesky_corr_constrain(isos,lp__);
        else
            corr_mean = in__.cholesky_corr_constrain(isos);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > tau_prey;
        size_t dim_tau_prey_0__ = n_preys;
        tau_prey.reserve(dim_tau_prey_0__);
        for (size_t k_0__ = 0; k_0__ < dim_tau_prey_0__; ++k_0__) {
            if (jacobian__)
                tau_prey.push_back(in__.vector_lb_constrain(0,isos,lp__));
            else
                tau_prey.push_back(in__.vector_lb_constrain(0,isos));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  tau_mean;
        (void) tau_mean;  // dummy to suppress unused var warning
        if (jacobian__)
            tau_mean = in__.vector_lb_constrain(0,isos,lp__);
        else
            tau_mean = in__.vector_lb_constrain(0,isos);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  tau_pred;
        (void) tau_pred;  // dummy to suppress unused var warning
        if (jacobian__)
            tau_pred = in__.vector_lb_constrain(0,isos,lp__);
        else
            tau_pred = in__.vector_lb_constrain(0,isos);

        vector<T__> props;
        size_t dim_props_0__ = n_preys;
        props.reserve(dim_props_0__);
        for (size_t k_0__ = 0; k_0__ < dim_props_0__; ++k_0__) {
            if (jacobian__)
                props.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                props.push_back(in__.scalar_lb_constrain(0));
        }


        // transformed parameters
        vector<Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> > prey_precs_SI(n_preys, (Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(isos),static_cast<Eigen::VectorXd::Index>(isos))));
        stan::math::initialize(prey_precs_SI, DUMMY_VAR__);
        stan::math::fill(prey_precs_SI,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  pred_prec_SI(static_cast<Eigen::VectorXd::Index>(isos),static_cast<Eigen::VectorXd::Index>(isos));
        (void) pred_prec_SI;  // dummy to suppress unused var warning
        stan::math::initialize(pred_prec_SI, DUMMY_VAR__);
        stan::math::fill(pred_prec_SI,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  prop(static_cast<Eigen::VectorXd::Index>(n_preys));
        (void) prop;  // dummy to suppress unused var warning
        stan::math::initialize(prop, DUMMY_VAR__);
        stan::math::fill(prop,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  prey_SI(static_cast<Eigen::VectorXd::Index>(isos),static_cast<Eigen::VectorXd::Index>(n_preys));
        (void) prey_SI;  // dummy to suppress unused var warning
        stan::math::initialize(prey_SI, DUMMY_VAR__);
        stan::math::fill(prey_SI,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  mu_SI(static_cast<Eigen::VectorXd::Index>(isos));
        (void) mu_SI;  // dummy to suppress unused var warning
        stan::math::initialize(mu_SI, DUMMY_VAR__);
        stan::math::fill(mu_SI,DUMMY_VAR__);


        try {
            current_statement_begin__ = 33;
            for (int j = 1; j <= n_preys; ++j) {

                current_statement_begin__ = 34;
                stan::math::assign(get_base1_lhs(prop,j,"prop",1), (get_base1(props,j,"props",1) / sum(stan::model::rvalue(props, stan::model::cons_list(stan::model::index_min_max(1, n_preys), stan::model::nil_index_list()), "props"))));
                current_statement_begin__ = 35;
                stan::math::assign(get_base1_lhs(prey_precs_SI,j,"prey_precs_SI",1), diag_pre_multiply(get_base1(tau_prey,j,"tau_prey",1),get_base1(corr_prey,j,"corr_prey",1)));
                current_statement_begin__ = 36;
                stan::model::assign(prey_SI, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            add(get_base1(cs,j,"cs",1),get_base1(cons_prey_SI,j,"cons_prey_SI",1)), 
                            "assigning variable prey_SI");
            }
            current_statement_begin__ = 40;
            stan::math::assign(mu_SI, multiply(prey_SI,prop));
            current_statement_begin__ = 42;
            stan::math::assign(pred_prec_SI, diag_pre_multiply(tau_pred,corr_pred));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < n_preys; ++i0__) {
            for (int i1__ = 0; i1__ < isos; ++i1__) {
                for (int i2__ = 0; i2__ < isos; ++i2__) {
                    if (stan::math::is_uninitialized(prey_precs_SI[i0__](i1__,i2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: prey_precs_SI" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
        }
        for (int i0__ = 0; i0__ < isos; ++i0__) {
            for (int i1__ = 0; i1__ < isos; ++i1__) {
                if (stan::math::is_uninitialized(pred_prec_SI(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: pred_prec_SI" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < n_preys; ++i0__) {
            if (stan::math::is_uninitialized(prop(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: prop" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < isos; ++i0__) {
            for (int i1__ = 0; i1__ < n_preys; ++i1__) {
                if (stan::math::is_uninitialized(prey_SI(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: prey_SI" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < isos; ++i0__) {
            if (stan::math::is_uninitialized(mu_SI(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: mu_SI" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            current_statement_begin__ = 48;
            for (int ps = 1; ps <= n_prey_samps_SI; ++ps) {
                current_statement_begin__ = 48;
                lp_accum__.add(multi_normal_cholesky_log<propto__>(get_base1(preys_SI,ps,"preys_SI",1), get_base1(prey_means_SI,get_base1(prey_ix_SI,ps,"prey_ix_SI",1),"prey_means_SI",1), get_base1(prey_precs_SI,get_base1(prey_ix_SI,ps,"prey_ix_SI",1),"prey_precs_SI",1)));
            }
            current_statement_begin__ = 52;
            for (int p = 1; p <= n_preds; ++p) {
                current_statement_begin__ = 52;
                lp_accum__.add(multi_normal_cholesky_log<propto__>(get_base1(preds_SI,p,"preds_SI",1), mu_SI, pred_prec_SI));
            }
            current_statement_begin__ = 55;
            for (int j = 1; j <= n_preys; ++j) {

                current_statement_begin__ = 57;
                lp_accum__.add(cauchy_log<propto__>(get_base1(tau_prey,j,"tau_prey",1), 0, 10));
                current_statement_begin__ = 58;
                lp_accum__.add(lkj_corr_cholesky_log<propto__>(get_base1(corr_prey,j,"corr_prey",1), 1));
                current_statement_begin__ = 60;
                lp_accum__.add(multi_normal_cholesky_log<propto__>(get_base1(prey_means_SI,j,"prey_means_SI",1), get_base1(preym_SI,j,"preym_SI",1), diag_pre_multiply(tau_mean,corr_mean)));
                current_statement_begin__ = 61;
                lp_accum__.add(multi_normal_cholesky_log<propto__>(get_base1(cons_prey_SI,j,"cons_prey_SI",1), get_base1(prey_means_SI,j,"prey_means_SI",1), get_base1(prey_precs_SI,j,"prey_precs_SI",1)));
                current_statement_begin__ = 64;
                lp_accum__.add(gamma_log<propto__>(get_base1(props,j,"props",1), pow(n_preys,-(1)), 1));
                current_statement_begin__ = 66;
                lp_accum__.add(normal_log<propto__>(get_base1(cs,j,"cs",1), get_base1(mean_cs,j,"mean_cs",1), get_base1(sigma_cs,j,"sigma_cs",1)));
            }
            current_statement_begin__ = 75;
            lp_accum__.add(cauchy_log<propto__>(tau_pred, 0, 10));
            current_statement_begin__ = 76;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(corr_pred, 1));
            current_statement_begin__ = 78;
            lp_accum__.add(cauchy_log<propto__>(tau_mean, 0, 10));
            current_statement_begin__ = 79;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(corr_mean, 1));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("prey_means_SI");
        names__.push_back("cs");
        names__.push_back("cons_prey_SI");
        names__.push_back("corr_prey");
        names__.push_back("corr_pred");
        names__.push_back("corr_mean");
        names__.push_back("tau_prey");
        names__.push_back("tau_mean");
        names__.push_back("tau_pred");
        names__.push_back("props");
        names__.push_back("prey_precs_SI");
        names__.push_back("pred_prec_SI");
        names__.push_back("prop");
        names__.push_back("prey_SI");
        names__.push_back("mu_SI");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_preys);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dims__.push_back(isos);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(isos);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(isos);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dims__.push_back(isos);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(isos);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(isos);
        dims__.push_back(n_preys);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_Pop_prop_analysis_SI_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector<vector_d> prey_means_SI;
        size_t dim_prey_means_SI_0__ = n_preys;
        for (size_t k_0__ = 0; k_0__ < dim_prey_means_SI_0__; ++k_0__) {
            prey_means_SI.push_back(in__.vector_constrain(isos));
        }
        vector<vector_d> cs;
        size_t dim_cs_0__ = n_preys;
        for (size_t k_0__ = 0; k_0__ < dim_cs_0__; ++k_0__) {
            cs.push_back(in__.vector_constrain(isos));
        }
        vector<vector_d> cons_prey_SI;
        size_t dim_cons_prey_SI_0__ = n_preys;
        for (size_t k_0__ = 0; k_0__ < dim_cons_prey_SI_0__; ++k_0__) {
            cons_prey_SI.push_back(in__.vector_constrain(isos));
        }
        vector<matrix_d> corr_prey;
        size_t dim_corr_prey_0__ = n_preys;
        for (size_t k_0__ = 0; k_0__ < dim_corr_prey_0__; ++k_0__) {
            corr_prey.push_back(in__.cholesky_corr_constrain(isos));
        }
        matrix_d corr_pred = in__.cholesky_corr_constrain(isos);
        matrix_d corr_mean = in__.cholesky_corr_constrain(isos);
        vector<vector_d> tau_prey;
        size_t dim_tau_prey_0__ = n_preys;
        for (size_t k_0__ = 0; k_0__ < dim_tau_prey_0__; ++k_0__) {
            tau_prey.push_back(in__.vector_lb_constrain(0,isos));
        }
        vector_d tau_mean = in__.vector_lb_constrain(0,isos);
        vector_d tau_pred = in__.vector_lb_constrain(0,isos);
        vector<double> props;
        size_t dim_props_0__ = n_preys;
        for (size_t k_0__ = 0; k_0__ < dim_props_0__; ++k_0__) {
            props.push_back(in__.scalar_lb_constrain(0));
        }
        for (int k_1__ = 0; k_1__ < isos; ++k_1__) {
            for (int k_0__ = 0; k_0__ < n_preys; ++k_0__) {
                vars__.push_back(prey_means_SI[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < isos; ++k_1__) {
            for (int k_0__ = 0; k_0__ < n_preys; ++k_0__) {
                vars__.push_back(cs[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < isos; ++k_1__) {
            for (int k_0__ = 0; k_0__ < n_preys; ++k_0__) {
                vars__.push_back(cons_prey_SI[k_0__][k_1__]);
            }
        }
        for (int k_2__ = 0; k_2__ < isos; ++k_2__) {
            for (int k_1__ = 0; k_1__ < isos; ++k_1__) {
                for (int k_0__ = 0; k_0__ < n_preys; ++k_0__) {
                    vars__.push_back(corr_prey[k_0__](k_1__, k_2__));
                }
            }
        }
        for (int k_1__ = 0; k_1__ < isos; ++k_1__) {
            for (int k_0__ = 0; k_0__ < isos; ++k_0__) {
                vars__.push_back(corr_pred(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < isos; ++k_1__) {
            for (int k_0__ = 0; k_0__ < isos; ++k_0__) {
                vars__.push_back(corr_mean(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < isos; ++k_1__) {
            for (int k_0__ = 0; k_0__ < n_preys; ++k_0__) {
                vars__.push_back(tau_prey[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < isos; ++k_0__) {
            vars__.push_back(tau_mean[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < isos; ++k_0__) {
            vars__.push_back(tau_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_preys; ++k_0__) {
            vars__.push_back(props[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        vector<matrix_d> prey_precs_SI(n_preys, (matrix_d(static_cast<Eigen::VectorXd::Index>(isos),static_cast<Eigen::VectorXd::Index>(isos))));
        stan::math::initialize(prey_precs_SI, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(prey_precs_SI,DUMMY_VAR__);
        matrix_d pred_prec_SI(static_cast<Eigen::VectorXd::Index>(isos),static_cast<Eigen::VectorXd::Index>(isos));
        (void) pred_prec_SI;  // dummy to suppress unused var warning
        stan::math::initialize(pred_prec_SI, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(pred_prec_SI,DUMMY_VAR__);
        vector_d prop(static_cast<Eigen::VectorXd::Index>(n_preys));
        (void) prop;  // dummy to suppress unused var warning
        stan::math::initialize(prop, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(prop,DUMMY_VAR__);
        matrix_d prey_SI(static_cast<Eigen::VectorXd::Index>(isos),static_cast<Eigen::VectorXd::Index>(n_preys));
        (void) prey_SI;  // dummy to suppress unused var warning
        stan::math::initialize(prey_SI, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(prey_SI,DUMMY_VAR__);
        vector_d mu_SI(static_cast<Eigen::VectorXd::Index>(isos));
        (void) mu_SI;  // dummy to suppress unused var warning
        stan::math::initialize(mu_SI, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_SI,DUMMY_VAR__);


        try {
            current_statement_begin__ = 33;
            for (int j = 1; j <= n_preys; ++j) {

                current_statement_begin__ = 34;
                stan::math::assign(get_base1_lhs(prop,j,"prop",1), (get_base1(props,j,"props",1) / sum(stan::model::rvalue(props, stan::model::cons_list(stan::model::index_min_max(1, n_preys), stan::model::nil_index_list()), "props"))));
                current_statement_begin__ = 35;
                stan::math::assign(get_base1_lhs(prey_precs_SI,j,"prey_precs_SI",1), diag_pre_multiply(get_base1(tau_prey,j,"tau_prey",1),get_base1(corr_prey,j,"corr_prey",1)));
                current_statement_begin__ = 36;
                stan::model::assign(prey_SI, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            add(get_base1(cs,j,"cs",1),get_base1(cons_prey_SI,j,"cons_prey_SI",1)), 
                            "assigning variable prey_SI");
            }
            current_statement_begin__ = 40;
            stan::math::assign(mu_SI, multiply(prey_SI,prop));
            current_statement_begin__ = 42;
            stan::math::assign(pred_prec_SI, diag_pre_multiply(tau_pred,corr_pred));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_2__ = 0; k_2__ < isos; ++k_2__) {
            for (int k_1__ = 0; k_1__ < isos; ++k_1__) {
                for (int k_0__ = 0; k_0__ < n_preys; ++k_0__) {
                    vars__.push_back(prey_precs_SI[k_0__](k_1__, k_2__));
                }
            }
        }
        for (int k_1__ = 0; k_1__ < isos; ++k_1__) {
            for (int k_0__ = 0; k_0__ < isos; ++k_0__) {
                vars__.push_back(pred_prec_SI(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < n_preys; ++k_0__) {
            vars__.push_back(prop[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < n_preys; ++k_1__) {
            for (int k_0__ = 0; k_0__ < isos; ++k_0__) {
                vars__.push_back(prey_SI(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < isos; ++k_0__) {
            vars__.push_back(mu_SI[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_Pop_prop_analysis_SI";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= isos; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_preys; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prey_means_SI" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= isos; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_preys; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cs" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= isos; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_preys; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cons_prey_SI" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= isos; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= isos; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= n_preys; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "corr_prey" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_1__ = 1; k_1__ <= isos; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= isos; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corr_pred" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= isos; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= isos; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corr_mean" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= isos; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_preys; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tau_prey" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= isos; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_mean" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= isos; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_preys; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "props" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_2__ = 1; k_2__ <= isos; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= isos; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= n_preys; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prey_precs_SI" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_1__ = 1; k_1__ <= isos; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= isos; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pred_prec_SI" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= n_preys; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prop" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= n_preys; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= isos; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prey_SI" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= isos; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_SI" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= isos; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_preys; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prey_means_SI" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= isos; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_preys; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cs" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= isos; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_preys; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cons_prey_SI" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= ((isos * (isos - 1)) / 2); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_preys; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corr_prey" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= ((isos * (isos - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "corr_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((isos * (isos - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "corr_mean" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= isos; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_preys; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tau_prey" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= isos; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_mean" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= isos; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_preys; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "props" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_2__ = 1; k_2__ <= isos; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= isos; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= n_preys; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prey_precs_SI" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_1__ = 1; k_1__ <= isos; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= isos; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pred_prec_SI" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= n_preys; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prop" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= n_preys; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= isos; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prey_SI" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= isos; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_SI" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }

}; // model

} // namespace




#endif
